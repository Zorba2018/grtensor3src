==============================================================================
GRTensorIII Source code, release notes and build procedure

This repo holds the source code for GRTensorIII package for Maple

For installation and usage see the Wiki tab on the GITLAB page
==============================================================================

The code has been restructured to reside in a single Maple module, grtensor.

The Module is defined in build/griii.mpl

The Makefile will run the build/griii.mpl using command line Maple provided
that the Makefile has been edited to have the correct paths. 

The use of a Module/Package in Maple required re-scoping of many of the internal
variables used in GRTensor. Briefly:
- all component info is now in gr_data[<root>, <metric>, etc.]
- spacetime dimension is in Ndim[<metric>]
- active metric is grG_metricName




==============================================================================
GRTensorII 1.xx: Source code release notes and build procedure

August 1999
==============================================================================

These notes refer to the GRTensorII Release 1.xx source code.

GRTensor II is a computer algebra package for performing calculations
in the general area of differential geometry. Its purpose is the
calculation of tensor components on curved spacetimes specified in
terms of a metric or set of basis vectors. The package contains a
library of standard definitions of a large number of commonly used
curvature tensors, as well as the Newman-Penrose formalism. The
standard object libraries are easily expandable by a facility for
defining new tensors. Calculations can be carried out in spaces of
arbitrary dimension, and in multiple spacetimes simultaneously. Though
originally designed for use in the field of general relativity,
GRTensorII is useful in many other fields. 

GRTensor II is not a standalone package, but requires an algebraic
engine. The program was originally developed for MapleV. An earlier
version has been ported to Mathematica under the name GRTensorM.

These notes describe the MapleV version of GRTensorII.

Contents:

1. How to get the source code
2. What you will need to build GRTensorII
3. Building and installing from the source code
   3.1 Building the libraries using 'make'
   3.2 Building the libraries by hand
4. Setting up Maple to run GRTensorII
5. Starting up GRTensorII
6. Reporting bugs/suggestions
7. Submitting patches
8. Notes

More information regarding GRTensor can be obtained from:
  http://grtensor.phy.queensu.ca/

==============================================================================
1. How to get the source code
==============================================================================

HTTP/FTP:

At the moment, source code is not being distributed from the ftp
site, but can be requested from the authors by sending an email to
  <grtensor@astro.queensu.ca>

CVS:

The latest source code, including changes made since the last release,
can be obtained from the GRTensor CVS archive located at:
  :ext:grtensor@grtensor.phy.queensu.ca:/export/home/grtensor/CVS

Local CVS access:
For example, users with an account on grtensor.phy.queensu.ca can obtain
an up-to-date copy of the source:
 setenv CVSROOT /export/home/grtensor/CVS
 cvs checkout grii

Remote CVS access:
At the present time, anonymous CVS access is not available. This means
only users with an account on grtensor.phy.queensu.ca can access
the source from a remote machine.
1. Set up your home directory on grtensor to use ssh. This involves
   creating a .ssh2 directory, putting your public key from the remote
   machine there, and creating an authorisation file referring to your
   public key. Read the ssh documentation for more information.
2. On the remote machine, set the CVSROOT and CVS_RSH variables:
   setenv CVSROOT :ext:grtensor@grtensor.phy.queensu.ca:/export/home/grtensor/CVS
   setenv CVS_RSH ssh
3. You should then be able to check out the source on the remote
   machine as usual:
   cvs checkout grii

CVS software is freely available from:
  http://www.cyclic.com/
Full documentation is included with the distribution. A tutorial is
also available at:
  http://www.csc.calpoly.edu/~dbutler/tutorials/winter96/cvs/

==============================================================================
2. What you will need to build GRTensorII
==============================================================================

Maple:

You will need a copy of the MapleV computer algebra system, Release >= 4.0. 
Unfortunately, this system is not available freely. More information
can be obtained from the Symbolic Computation Group of the University of
Waterloo:

  http://daisy.uwaterloo.ca/home.html

The GRTensor source code is identical for Releases 4 and 5 of
MapleV. In fact, things should also work with at most minor
modifications on older MapleV.3 distributions, though we don't
actively work for R3 backward compatibility anymore or build R3
libraries very often. GRTensorII will not work under MapleV Release 2
because of changes to the way global and local variables were treated.

*** what do we know about student version compatibility?


Other tools:

In order to build the source code distribution, the presence of
certain commonly available tools is assumed: 

  tar, gzip, make, install, sed.

These tools are standard on most Unix platforms and Linux
distributions. Versions compatible with other operating systems are
also available.

If you are using CVS and wish to generate a ChangeLog based on the CVS
archive, the perl script cvs2cl can be used. This script is available from:
  http://www.red-bean.com/~kfogel/cvs2cl.shtml
A copy is also stored in the extras/ directory of the GRTensor source
distribution.  This script requires Perl5 in order to run.

==============================================================================
3. Building and installing from the source code
==============================================================================

The GRTensorII distribution consists of a number of MapleV library
(.m) files and a directory of sample spacetime metric files.

Basically, the build procedure consists of reading all of the *.mpl
files in the maple/grii directory into maple and then saving session
as grii.m. If you can do this by any means you like, you can build
GRTensor. We've also put together some scripts to automate the
procedure which are described here.


3.1 Building the libraries using make:

  Read through the Makefile and make sure that the environment
  variables are set correctly for your system. Type

    make grtensor

  to build the GRTensorII libraries. To install these (including the
  metric directories) on your system, use the command:

    make install


3.2 Building the libraries by hand:

   If you do not have GNU make or some of the tools necessary to build
   GRTensorII using the Makefile, you can install it manually by using
   the scripts in the build/ directory.

  1. Modify the build scripts:

   A number of maple scripts exist in the build/ directory, one for
   each GRTensorII library which can be built. The most important of
   these is the file grii.mpl which specifies the instructions for
   building the main GRTensorII library.

   Edit each of the *.mpl the files in the following way:

   * Near the top, a variable named rootDir is set. Ensure
     that this is pointing to the directory in which the grii source
     code is stored. The directory can be given either as an absolute
     path, or as a relative path from the directory in which you will
     later run the maple command.

   * In the grii.mpl file, the variables grG_Version and grG_Date
     variables are normally set using a sed command which processes
     the Version file (in the root directory of the source tree). If sed
     is not available, set these variables manually.

  2. Build the GRTensorII libraries:

     (1) Open a clean MapleV session using the command
           maple -s
         or
           xmaple -s

     (2) Read one of the script files into maple using the command:
         read <filename>.mpl:

     The maple session should terminate once the file is read, and a
     MapleV library file named
       <filename>.m
     should have been created in the current directory.

     Perform steps (1) and (2) for each of the *.mpl files in the
     build directory.

     The following files should have been created:
        grii.m basislib.m dinvar.m invar.m trigsin.m maple.hdb

  3. Install the libraries:

     Move the library files created in the previous step to a
     directory on your system where you would like the GRTensorII
     package to reside permanently.

  4. Install the metric directory:

     Create a directory on your system where you would like
     GRTensorII metric files to reside. Copy the *.mpl files from the
     metrics/ directory into the directory which you have created.

==============================================================================
4. Setting up Maple to run GRTensorII
==============================================================================

In order to run GRTensorII, you will need to set up MapleV so that it
knows where to find the new library and metric files. This involves
two steps:
  1. setting the libname variable to point to the directory of
     GRTensorII libraries
  2. setting the grOptionMetricPath variable to point to the metric
     directory


Method 1: Add a script to your .mapleinit file

  The initialisation can be done automatically when MapleV is started by
  adding the following lines to .mapleinit file in your home
  directory(*)


#-- maple script to initialise GRTensorII --
grt := proc ()
  global libname, grOptionMetricPath, grOptionqloadPath:

  # set the libname variable (replace <grii_dir>)
  libname := <grii_dir>, libname:

  # read and initialise grtensor
  readlib (grii):
  grtensor():

  # set the metric directory variables (replace <metric_dir>)
  grOptionMetricDir := <metric_dir>:
  grOptionqloadPath := <metric_dir>:

end:
#-------------------------------------------


  In the above script, replace the strings <grii_dir> and <metric_dir>
  with strings indicating the GRTensor library and metric directories on
  your system, eg. the libname line might read:

    libname := `/usr/local/grii/lib5`, libname:

  [as always with maple, note the orientation of the quotes].


Method 2: Use a grtensor.ini file

  This method also requires that the .mapleinit file be altered to
  ensure that the GRTensor libraries can be found (*). Add a line like

     libname := <grii_dir>, libname:

  where <grii_dir> is replaced by the path indicating where GRTensor's
  *.m library files are located.

  Then, within the <grii_dir>, create a file called grtensor.ini and
  add the following line:

    grOptionMetricDir := <metric_dir>:

  where <metric_dir> points to the directory where the metric files
  are being kept.

  For example, if your grii.m is located in the directory
  /usr/local/grii/lib and the metric files have been stored in
  /usr/local/grii/metrics, then you would add the line

    libname := `/usr/local/grii/lib`, libname:

  to a file called .mapleinit in your home directory, and create a
  file in /usr/local/grii/lib called grtensor.ini in which you would
  add the single line

    grOptionMetricDir := `/usr/local/grii/metrics`:

  Any other commands which you would like to run automatically when
  GRTensor is initialised (eg. setting other option variables) can
  also be put in the grtensor.ini file.     

--------
(*) If this file does not exist in your home directory, create it. I
you are using a non-Unix based machine, it is possible that the file
`mapleinit' in the standard MapleV library directory can be modified
for the same results.

#==============================================================================
5. Starting up GRTensorII
#==============================================================================

If you have created a grt() script as described in Method (1), above,
then you can start up GRTensor within maple by running the command:

  > grt():

at the maple prompt. A title message giving the date and version
number should be displayed.


Otherwise, as long as the libname variable has been correctly set, you
can load and initialise GRTensor with the following pair of commands
issued at the maple prompt:

  > readlib (grii):
  > grtensor():

You will not be able to load metrics from the default metric directory
until the grOptionMetricPath variable has been set, either manually or
through use of the grtensor.ini file described in the previous section.

==============================================================================
6. Reporting bugs/suggestions
==============================================================================

If you come across a bug in GRTensorII we'd very much like to hear
about it so that it can be corrected in the next release. Please send
an email to:
  <grtensor@astro.queensu.ca>
including a description of the problem. If possible, attach a MapleV
worksheet reproducing the bug, including any needed input files
(metric files, etc.). Suggestions for improvement or added
functionality can be sent to the same address.

==============================================================================
7. Submitting patches
==============================================================================

Currently write-access to the CVS archives is restricted to the
original GRTensor authors. If you have modified the source code
(for instance to add functionality or fixing a bug), it can be
included in the next release by sending your updated code to
  Denis Pollney <dp@maths.soton.ac.uk>
either in the form of a tarred source directory, or a patch (eg. on
Unix systems, send the output of 'diff -u' applied to the source
directory). Contributed code will be credited to the original
author in the Release Notes distributed with each version, and with
permission the author will be listed in the Contributors file of the
source directory.


==============================================================================
8. Notes
==============================================================================

* If you're interested in hacking around in the source code there are
  some old notes describing the source in the file doc/grtensor.notes.

* There is a maple.el emacs mode in the extras/ directory. It was
  originally written by Bruno Salvy and hacked a bit by me to
  add some colors. It's not particularly advanced as far as
  emacs-modes go and some of the indenting is a bit flakey. Please
  let me know if you make any improvements to it.

* Also, there is a script (maple.tags) which creates an emacs TAGS
  file referencing maple procedures. Execute maple.tags from the
  root of your source tree to create the file. Documentation of TAGS
  is available from the emacs help system.

Denis Pollney <dp@maths.soton.ac.uk>
August 1999
